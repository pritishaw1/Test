import pandas as pd
import numpy as np
from keras.preprocessing.sequence import TimeseriesGenerator
from keras.models import Sequential
from keras.layers import LSTM, Dense
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Load the dataset
df = pd.read_csv("customer_journey_dataset.csv")

# Preprocess the data
# Convert the miniApps feature to a categorical feature
le = LabelEncoder()
df['miniApps'] = le.fit_transform(df['miniApps'])

# Group the data by membershipNumber and get their miniApps in a sequence
df_grouped = df.groupby('membershipNumber')['miniApps'].apply(list).reset_index()

# Split the data into features and target variable
X = np.array([i[:-1] for i in df_grouped['miniApps'].values])
y = np.array([i[-1] for i in df_grouped['miniApps'].values])

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create the sequences for the LSTM model
batch_size = 1
n_input = 1
generator = TimeseriesGenerator(X_train, y_train, length=n_input, batch_size=batch_size)

# Define the LSTM model
model = Sequential()
model.add(LSTM(50, activation='relu', input_shape=(n_input, 1)))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mse')

# Fit the model on the training data
model.fit_generator(generator, epochs=50)

# Predict on the test data
X_test = X_test.reshape((X_test.shape[0], n_input, 1))
y_pred = model.predict(X_test)
y_pred = np.round(y_pred.flatten())

# Evaluate the accuracy of the model
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
